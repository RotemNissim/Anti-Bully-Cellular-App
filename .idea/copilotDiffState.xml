<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/antibully/data/ui/settings/SettingsFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/antibully/data/ui/settings/SettingsFragment.kt" />
              <option name="originalContent" value="package com.example.antibully.data.ui.settings&#10;&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.browser.customtabs.CustomTabsIntent&#10;import androidx.core.view.isVisible&#10;import androidx.fragment.app.Fragment&#10;import androidx.navigation.fragment.findNavController&#10;import com.example.antibully.R&#10;import com.example.antibully.databinding.FragmentSettingsBinding&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.squareup.picasso.Picasso&#10;import kotlinx.coroutines.MainScope&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class SettingsFragment : Fragment() {&#10;&#10;    private var _binding: FragmentSettingsBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    // Toggle this if you decide to hide Add Child from the Settings screen&#10;    private val showAddChildRow = true&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentSettingsBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        binding.settingsLoading.visibility = View.VISIBLE&#10;        binding.settingsContentContainer.visibility = View.GONE&#10;&#10;        // Load header (name/email/avatar)&#10;        MainScope().launch { bindUserHeader() }&#10;&#10;        // ===== Edit Profile =====&#10;        binding.rowEditProfile.icon.setImageResource(R.drawable.ic_edit)&#10;        binding.rowEditProfile.title.text = getString(R.string.settings_edit_profile)&#10;        binding.rowEditProfile.root.setOnClickListener {&#10;            findNavController().navigate(R.id.action_settingsFragment_to_editProfileFragment)&#10;        }&#10;&#10;        // ===== Discord (OAuth + Bot Invite) =====&#10;        // Use an icon that exists in your project:&#10;        binding.rowDiscord.icon.setImageResource(R.drawable.ic_discord_hollow)&#10;        binding.rowDiscord.title.text = getString(R.string.settings_connect_discord)&#10;        binding.rowDiscord.root.setOnClickListener { findNavController().navigate(R.id.connectDiscordFragment) }&#10;&#10;        // ===== Add Child (optional) =====&#10;        binding.rowAddChild.root.isVisible = showAddChildRow&#10;        if (showAddChildRow) {&#10;            binding.rowAddChild.icon.setImageResource(R.drawable.ic_add_24dp)&#10;            binding.rowAddChild.title.text = getString(R.string.settings_add_child)&#10;            binding.rowAddChild.root.setOnClickListener {&#10;                openDiscordOAuthViaBackend()&#10;            }&#10;        }&#10;&#10;        // ===== Security (2FA) =====&#10;        binding.rowSecurity.icon.setImageResource(R.drawable.ic_security)&#10;        binding.rowSecurity.title.text = getString(R.string.settings_security)&#10;        binding.rowSecurity.root.setOnClickListener {&#10;            findNavController().navigate(R.id.action_settingsFragment_to_securitySettingsFragment)&#10;        }&#10;&#10;        // ===== Privacy =====&#10;        binding.rowPrivacy.icon.setImageResource(R.drawable.ic_privacy)&#10;        binding.rowPrivacy.title.text = getString(R.string.settings_privacy)&#10;        binding.rowPrivacy.root.setOnClickListener {&#10;            // findNavController().navigate(R.id.action_settingsFragment_to_privacyFragment)&#10;        }&#10;&#10;        // ===== Help &amp; Support =====&#10;        binding.rowHelp.icon.setImageResource(R.drawable.ic_help)&#10;        binding.rowHelp.title.text = getString(R.string.settings_help_support)&#10;        binding.rowHelp.root.setOnClickListener {&#10;            // findNavController().navigate(R.id.action_settingsFragment_to_helpFragment)&#10;        }&#10;    }&#10;&#10;    private suspend fun bindUserHeader() {&#10;        val uid = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val doc = FirebaseFirestore.getInstance().collection(&quot;users&quot;).document(uid).get().await()&#10;        val name = doc.getString(&quot;fullName&quot;) ?: &quot;&quot;&#10;        val email = FirebaseAuth.getInstance().currentUser?.email ?: &quot;&quot;&#10;        val profileUrl = doc.getString(&quot;profileImageUrl&quot;)&#10;&#10;        binding.tvName.text = name&#10;        binding.tvEmail.text = email&#10;        if (!profileUrl.isNullOrEmpty()) {&#10;            Picasso.get().load(profileUrl).into(binding.imgAvatar)&#10;        }&#10;    }&#10;&#10;    private fun showDiscordActions() {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(getString(R.string.settings_connect_discord))&#10;            .setItems(&#10;                arrayOf(&#10;                    getString(R.string.settings_connect_discord_account),&#10;                    getString(R.string.settings_add_bot_to_server)&#10;                )&#10;            ) { _, which -&gt;&#10;                when (which) {&#10;                    0 -&gt; openDiscordOAuthViaBackend()&#10;                    1 -&gt; openBotInvite()&#10;                }&#10;            }&#10;            .setNegativeButton(android.R.string.cancel, null)&#10;            .show()&#10;    }&#10;&#10;    private fun openDiscordOAuthViaBackend() {&#10;            val oauthUrl = &quot;https://discord.com/oauth2/authorize?client_id=1373612221166391397&amp;response_type=code&amp;redirect_uri=http%3A%2F%2F10.0.2.2%3A3000%2Fapi%2Foauth%2Fdiscord%2Fcallback&amp;scope=identify&quot;&#10;            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(oauthUrl))&#10;            startActivity(intent)&#10;    }&#10;&#10;    private fun openBotInvite() {&#10;        val invite =&#10;            &quot;https://discord.com/api/oauth2/authorize?client_id=1373612221166391397&amp;permissions=0&amp;scope=bot%20applications.commands&quot;&#10;        startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(invite)))&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.antibully.data.ui.settings&#10;&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.browser.customtabs.CustomTabsIntent&#10;import androidx.core.view.isVisible&#10;import androidx.fragment.app.Fragment&#10;import androidx.navigation.fragment.findNavController&#10;import com.example.antibully.R&#10;import com.example.antibully.databinding.FragmentSettingsBinding&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.squareup.picasso.Picasso&#10;import kotlinx.coroutines.MainScope&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.tasks.await&#10;&#10;class SettingsFragment : Fragment() {&#10;&#10;    private var _binding: FragmentSettingsBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    // Toggle this if you decide to hide Add Child from the Settings screen&#10;    private val showAddChildRow = true&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentSettingsBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        binding.settingsLoading.visibility = View.VISIBLE&#10;        binding.settingsContentContainer.visibility = View.GONE&#10;&#10;        // Load header (name/email/avatar)&#10;        MainScope().launch {&#10;            bindUserHeader()&#10;            // After loading is done, show content and hide loader&#10;            binding.settingsLoading.visibility = View.GONE&#10;            binding.settingsContentContainer.visibility = View.VISIBLE&#10;        }&#10;&#10;        // ===== Edit Profile =====&#10;        binding.rowEditProfile.icon.setImageResource(R.drawable.ic_edit)&#10;        binding.rowEditProfile.title.text = getString(R.string.settings_edit_profile)&#10;        binding.rowEditProfile.root.setOnClickListener {&#10;            findNavController().navigate(R.id.action_settingsFragment_to_editProfileFragment)&#10;        }&#10;&#10;        // ===== Discord (OAuth + Bot Invite) =====&#10;        // Use an icon that exists in your project:&#10;        binding.rowDiscord.icon.setImageResource(R.drawable.ic_discord_hollow)&#10;        binding.rowDiscord.title.text = getString(R.string.settings_connect_discord)&#10;        binding.rowDiscord.root.setOnClickListener { findNavController().navigate(R.id.connectDiscordFragment) }&#10;&#10;        // ===== Add Child (optional) =====&#10;        binding.rowAddChild.root.isVisible = showAddChildRow&#10;        if (showAddChildRow) {&#10;            binding.rowAddChild.icon.setImageResource(R.drawable.ic_add_24dp)&#10;            binding.rowAddChild.title.text = getString(R.string.settings_add_child)&#10;            binding.rowAddChild.root.setOnClickListener {&#10;                openDiscordOAuthViaBackend()&#10;            }&#10;        }&#10;&#10;        // ===== Security (2FA) =====&#10;        binding.rowSecurity.icon.setImageResource(R.drawable.ic_security)&#10;        binding.rowSecurity.title.text = getString(R.string.settings_security)&#10;        binding.rowSecurity.root.setOnClickListener {&#10;            findNavController().navigate(R.id.action_settingsFragment_to_securitySettingsFragment)&#10;        }&#10;&#10;        // ===== Privacy =====&#10;        binding.rowPrivacy.icon.setImageResource(R.drawable.ic_privacy)&#10;        binding.rowPrivacy.title.text = getString(R.string.settings_privacy)&#10;        binding.rowPrivacy.root.setOnClickListener {&#10;            // findNavController().navigate(R.id.action_settingsFragment_to_privacyFragment)&#10;        }&#10;&#10;        // ===== Help &amp; Support =====&#10;        binding.rowHelp.icon.setImageResource(R.drawable.ic_help)&#10;        binding.rowHelp.title.text = getString(R.string.settings_help_support)&#10;        binding.rowHelp.root.setOnClickListener {&#10;            // findNavController().navigate(R.id.action_settingsFragment_to_helpFragment)&#10;        }&#10;    }&#10;&#10;    private suspend fun bindUserHeader() {&#10;        val uid = FirebaseAuth.getInstance().currentUser?.uid ?: return&#10;        val doc = FirebaseFirestore.getInstance().collection(&quot;users&quot;).document(uid).get().await()&#10;        val name = doc.getString(&quot;fullName&quot;) ?: &quot;&quot;&#10;        val email = FirebaseAuth.getInstance().currentUser?.email ?: &quot;&quot;&#10;        val profileUrl = doc.getString(&quot;profileImageUrl&quot;)&#10;&#10;        binding.tvName.text = name&#10;        binding.tvEmail.text = email&#10;        if (!profileUrl.isNullOrEmpty()) {&#10;            Picasso.get().load(profileUrl).into(binding.imgAvatar)&#10;        }&#10;    }&#10;&#10;    private fun showDiscordActions() {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(getString(R.string.settings_connect_discord))&#10;            .setItems(&#10;                arrayOf(&#10;                    getString(R.string.settings_connect_discord_account),&#10;                    getString(R.string.settings_add_bot_to_server)&#10;                )&#10;            ) { _, which -&gt;&#10;                when (which) {&#10;                    0 -&gt; openDiscordOAuthViaBackend()&#10;                    1 -&gt; openBotInvite()&#10;                }&#10;            }&#10;            .setNegativeButton(android.R.string.cancel, null)&#10;            .show()&#10;    }&#10;&#10;    private fun openDiscordOAuthViaBackend() {&#10;            val oauthUrl = &quot;https://discord.com/oauth2/authorize?client_id=1373612221166391397&amp;response_type=code&amp;redirect_uri=http%3A%2F%2F10.0.2.2%3A3000%2Fapi%2Foauth%2Fdiscord%2Fcallback&amp;scope=identify&quot;&#10;            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(oauthUrl))&#10;            startActivity(intent)&#10;    }&#10;&#10;    private fun openBotInvite() {&#10;        val invite =&#10;            &quot;https://discord.com/api/oauth2/authorize?client_id=1373612221166391397&amp;permissions=0&amp;scope=bot%20applications.commands&quot;&#10;        startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(invite)))&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>